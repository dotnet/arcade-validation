variables:
  - name: _TeamName
    value: DotNetCore
  - name: _PublishUsingPipelines
    value: true
  - name: _DotNetArtifactsCategory
    value: .NETCore
  - name: _DotNetValidationArtifactsCategory
    value: .NETCoreValidation
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - group: SDL_Settings
  - ${{ if and(eq(variables.PoolProvider, ''), eq(variables['System.TeamProject'], 'public')) }}:
    - name: PoolProvider
      value: NetCorePublic-Pool
  - ${{ if and(ne(variables.PoolProvider, ''), ne(variables['System.TeamProject'], 'public')) }}:
    - name: PoolProvider
      value: NetCoreInternal-Pool
  - ${{ if and(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'Schedule')) }}:
    - name: PoolProvider
      value: NetCorePublic-Int-Pool
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'Schedule')) }}:
    - name: PoolProvider
      value: NetCoreInternal-Int-Pool

trigger:
  batch: true
  branches:
    include:
      - master
      - release/3.x

schedules:
- cron: "0 0 * * *"
  displayName: Once a day build using Staging pools (at midnight)
  branches:
    include:
    - master
  always: true

resources:
  containers:
  - container: LinuxContainer
    image: microsoft/dotnet-buildtools-prereqs:ubuntu-14.04-cross-0cd4667-20170319080304

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: ${{ variables._PublishUsingPipelines }}
      enableTelemetry: true
      helixRepo: dotnet/arcade-validation
      jobs:
      - job: Windows_NT
        pool:
          name: $(PoolProvider) # This is a queue-time parameter; Public default is NetCorePublic-Pool; Internal default is NetCoreInternal-Pool
          ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
            queue: BuildPool.Windows.10.Amd64.VS2017.Open
          ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
            queue: BuildPool.Windows.10.Amd64.VS2017
        variables:
        - _InternalBuildArgs: ''

        # Only enable publishing in non-public, non PR scenarios.
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          # DotNet-Blob-Feed provides: dotnetfeed-storage-access-key-1
          - group: DotNet-Blob-Feed
          - _PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/arcade-validation/index.json
          - _InternalBuildArgs: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
              /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
              /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl)
              /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
              /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
              /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
              /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

        strategy:
          matrix:
            Build_Debug:
              _BuildConfig: Debug
              _SignType: test
              _DotNetPublishToBlobFeed : false
            Build_Release:
              _BuildConfig: Release
              # PRs or external builds are not signed.
              ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
                _SignType: test
                _DotNetPublishToBlobFeed : false
              ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
                _SignType: real
                _DotNetPublishToBlobFeed : true
        steps:
        - checkout: self
          clean: true
        # Use utility script to run script command dependent on agent OS.
        - script: eng\common\cibuild.cmd
            -configuration $(_BuildConfig) 
            -prepareMachine
            $(_InternalBuildArgs)
          displayName: Windows Build / Publish

      - job: Linux
        container: LinuxContainer
        pool:
          name: $(PoolProvider) # This is a queue-time parameter; Public default is NetCorePublic-Pool; Internal default is NetCoreInternal-Pool
          ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
            queue: BuildPool.Ubuntu.1604.Amd64.Open
          ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
            queue: BuildPool.Ubuntu.1604.Amd64
        strategy:
          matrix:
            Build_Debug:
              _BuildConfig: Debug
              _SignType: none
              _DotNetPublishToBlobFeed : false
            Build_Release:
              _BuildConfig: Release
              _SignType: none
              _DotNetPublishToBlobFeed : false
        steps:
        - checkout: self
          clean: true
        - script: eng/common/cibuild.sh
            --configuration $(_BuildConfig)
            --prepareMachine
          displayName: Unix Build / Publish

      - job: Validate_Helix
        variables:
        - HelixApiAccessToken: ''
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          - group: DotNet-HelixApi-Access
        - _BuildConfig: Release
        steps:
        - template: /eng/common/templates/steps/send-to-helix.yml
          parameters:
            HelixType: test/product/
            XUnitProjects: $(Build.SourcesDirectory)/src/Validation/tests/Validation.Tests.csproj
            XUnitTargetFramework: netcoreapp2.0
            XUnitRunnerVersion: 2.4.1
            IncludeDotNetCli: true
            DotNetCliPackageType: sdk
            DotNetCliVersion: 2.1.403
            EnableXUnitReporter: true
            WaitForWorkItemCompletion: true
            ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
              HelixTargetQueues: Windows.10.Amd64.Open;Debian.9.Amd64.Open
              HelixSource: pr/dotnet/arcade-validation/$(Build.SourceBranch)
              IsExternal: true
              Creator: arcade-validation
            ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
              HelixTargetQueues: Windows.10.Amd64;Debian.9.Amd64
              HelixSource: official/dotnet/arcade-validation/$(Build.SourceBranch)
              HelixAccessToken: $(HelixApiAccessToken)
        displayName: Validate Helix

  # Jobs that should only run as part of internal builds.
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - job: Validate_Signing
          pool: 
            name: $(PoolProvider) # This is a queue-time parameter; Public default is NetCorePublic-Pool; Internal default is NetCoreInternal-Pool
            queue: BuildPool.Windows.10.Amd64.VS2017
          strategy:
            matrix:
              Test_Signing:
                _BuildConfig: Debug
                _SignType: test
              Real_Signing:
                _BuildConfig: Release
                _SignType: real
          steps:
            - checkout: self
              clean: true
            - task: CopyFiles@2
              displayName: Copy test packages to artifacts directory
              inputs:
                sourceFolder: $(Build.SourcesDirectory)\src\validation\resources
                targetFolder: $(Build.SourcesDirectory)\artifacts\packages\$(_BuildConfig)\NonShipping
            - powershell: eng\common\build.ps1
                -configuration $(_BuildConfig)
                -restore
                -prepareMachine
                -sign
                -ci
                /p:DotNetSignType=$(_SignType)
                /p:TeamName=DotNetCore
                /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
              displayName: Sign packages

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - template: eng\common\templates\post-build\post-build.yml
    parameters:
      # Symbol validation isn't being very reliable lately. This should be enabled back
      # once this issue is resolved: https://github.com/dotnet/arcade/issues/2871
      enableSymbolValidation: false
      # Sourcelink validation isn't passing for Arcade-validation. This should be
      # enabled back once this issue is resolved: https://github.com/dotnet/arcade/issues/3069
      enableSourceLinkValidation: false
      # This is to enable SDL runs part of Post-Build Validation Stage
      SDLValidationParameters:
        enable: true
        params: ' -SourceToolsList @("policheck","credscan")
        -TsaInstanceURL $(_TsaInstanceURL)
        -TsaProjectName $(_TsaProjectName)
        -TsaNotificationEmail $(_TsaNotificationEmail)
        -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
        -TsaBugAreaPath $(_TsaBugAreaPath)
        -TsaIterationPath $(_TsaIterationPath)
        -TsaRepositoryName "Arcade-Validation"
        -TsaCodebaseName "Arcade-Validation"
        -TsaPublish $True'

  - stage: Push_to_latest_channel
    displayName: Push build to 'Latest' channel
    dependsOn:
      # This will run only after all the publishing stages have run.
      # These stages are introduced in the eng/common/templates/post-build/channels YAML templates
      - NetCore_Dev5_Publish
      - Net_Eng_Latest_Publish
      - Net_Eng_Validation_Publish
      - General_Testing_Publish
      - NETCore_Tooling_Dev_Publishing
      - NETCore_Tooling_Release_Publishing
      - NET_Internal_Tooling_Publishing
    jobs:
    - template: /eng/common/templates/job/job.yml
      parameters:
        name: Push_to_latest_channel
        displayName: Push Builds to 'Latest' channel
        timeoutInMinutes: 180
        variables:
          - group: Publish-Build-Assets
          - group: DotNetBot-GitHub
        steps:
          - checkout: self
            clean: true
          - powershell: eng/validation/update-channel.ps1
              -maestroEndpoint https://maestro-prod.westus2.cloudapp.azure.com
              -barToken $(MaestroAccessToken)
              -azdoToken $(AzdoDncEngQueueBuildsToken)
              -githubToken $(BotAccount-dotnet-bot-repo-PAT)
            displayName: Move build to 'Latest' channel 
