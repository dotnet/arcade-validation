parameters:
  enablePreviewMicrobuild: false
  enableHelixValidation: true
  enablePublishBuildArtifacts: true
  enablePublishBuildAssets: true
  enablePublishUsingPipelines: true

stages:
- stage: build
  displayName: Build 
  jobs:
  - template: /eng/common/templates-official/jobs/jobs.yml@self
    parameters:
      enableMicrobuild: true
      enablePreviewMicrobuild: ${{ parameters.enablePreviewMicrobuild }}
      enableMicrobuildForMacAndLinux: true
      enablePublishBuildArtifacts: ${{ parameters.enablePublishBuildArtifacts }}
      enablePublishBuildAssets: ${{ parameters.enablePublishBuildAssets }}
      enablePublishUsingPipelines: ${{ parameters.enablePublishUsingPipelines }}
      enableTelemetry: true
      enableSourceBuild: ${{ parameters.enableSourceBuild }}
      helixRepo: dotnet/arcade-validation
      preSteps:
        - checkout: self
          clean: true
      jobs:
      - job: Windows_NT
        variables:
        - _InternalBuildArgs: /p:DotNetSignType=$(_SignType)
            /p:TeamName=$(_TeamName)
            /p:DotNetPublishUsingPipelines=true
            /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

        strategy:
          matrix:
            Build_Release:
              _BuildConfig: Release
              _SignType: real
        steps:
        - task: PowerShell@2
          displayName: Setup Private Feeds Credentials
          condition: eq(variables['Agent.OS'], 'Windows_NT')
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
            arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)
        # Use utility script to run script command dependent on agent OS.
        - script: eng\common\cibuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            $(_InternalBuildArgs)
          displayName: Windows Build / Publish
        - task: ComponentGovernanceComponentDetection@0
          displayName: Component Governance scan

      - job: Linux
        container: LinuxContainer
        pool:
          name: $(PoolProvider)
          image: 1es-ubuntu-2204
          os: linux

        variables:
        - _InternalBuildArgs: /p:DotNetSignType=$(_SignType)
            /p:TeamName=$(_TeamName)
            /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
            /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

        strategy:
          matrix:
            # No test signing - it's not supported on Linux and macOS
            Build_Release:
              _BuildConfig: Release
              _SignType: real
        steps:
        - task: Bash@3
          displayName: Setup Private Feeds Credentials
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
            arguments: $(Build.SourcesDirectory)/NuGet.config $Token
          condition: ne(variables['Agent.OS'], 'Windows_NT')
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)
        # Remove --sign from the script command with https://github.com/dotnet/source-build/issues/4064
        - script: eng/common/cibuild.sh
            --configuration $(_BuildConfig)
            --prepareMachine
            --sign
            $(_InternalBuildArgs)
          displayName: Unix Build / Publish
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        - task: ComponentGovernanceComponentDetection@0
          displayName: Component Governance scan

      - job: MacOS
        pool:
          name: Azure Pipelines
          image: macos-latest
          os: macOS

        variables:
        # 10 minute timeout and diagnostic logging needed to diagnose https://github.com/dotnet/dnceng/issues/4798
        - _InternalBuildArgs: /p:DotNetSignType=$(_SignType)
            /p:TeamName=$(_TeamName)
            /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
            /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
            /p:SignToolDotNetTimeout=600000
            /p:SignToolMSBuildVerbosity=diagnostic

        strategy:
          matrix:
            # No test signing - it's not supported on Linux and macOS
            Build_Release:
              _BuildConfig: Release
              _SignType: real
        steps:
        - task: Bash@3
          displayName: Setup Private Feeds Credentials
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
            arguments: $(Build.SourcesDirectory)/NuGet.config $Token
          condition: ne(variables['Agent.OS'], 'Windows_NT')
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)
        # Remove --sign from the script command with https://github.com/dotnet/source-build/issues/4064
        - script: |
            export MSBUILDTARGETOUTPUTLOGGING=1
            eng/common/cibuild.sh \
                --configuration $(_BuildConfig) \
                --prepareMachine \
                --sign \
                $(_InternalBuildArgs)
          displayName: Unix Build / Publish
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        - task: ComponentGovernanceComponentDetection@0
          displayName: Component Governance scan

      - ${{ if eq(parameters.enableHelixValidation, true) }}:
        - job: Validate_Helix
          variables:
          - HelixApiAccessToken: ''
          - group: DotNet-HelixApi-Access
          - _BuildConfig: Release
          - name: skipComponentGovernanceDetection
            value: true
          steps:
          - template: /eng/common/templates-official/steps/send-to-helix.yml
            parameters:
              HelixType: test/product/
              XUnitProjects: $(Build.SourcesDirectory)/src/Validation/tests/Validation.Tests.csproj
              IncludeDotNetCli: true
              DotNetCliPackageType: sdk
              EnableXUnitReporter: true
              WaitForWorkItemCompletion: true
              HelixTargetQueues: Windows.Amd64.Server2022;(Debian.12.Amd64)Ubuntu.2204.Amd64@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-amd64
              HelixSource: official/dotnet/arcade-validation/$(Build.SourceBranch)
              HelixAccessToken: $(HelixApiAccessToken)
          displayName: Validate Helix

      - job: Validate_Signing_Windows
        strategy:
          matrix:
            Test_Signing:
              _BuildConfig: Debug
              _SignType: test
            Real_Signing:
              _BuildConfig: Release
              _SignType: real
        steps:
          - task: CopyFiles@2
            displayName: Copy test packages to artifacts directory
            inputs:
              sourceFolder: $(Build.SourcesDirectory)\src\validation\resources
              targetFolder: $(Build.SourcesDirectory)\artifacts\packages\$(_BuildConfig)\NonShipping
          - task: CopyFiles@2
            displayName: Copy .vsix test packages to VS directory
            inputs:
              sourceFolder: $(Build.SourcesDirectory)\src\validation\resources\
              targetFolder: $(Build.SourcesDirectory)\artifacts\VSSetup\$(_BuildConfig)
              contents: '*.vsix'
          - powershell: eng\common\build.ps1
              -configuration $(_BuildConfig)
              -restore
              -prepareMachine
              -sign
              -ci
              /p:DotNetSignType=$(_SignType)
              /p:TeamName=DotNetCore
              /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

      - job: Validate_Signing_Linux
        container: LinuxContainer
        pool:
          name: $(PoolProvider)
          image: 1es-ubuntu-2204
          os: linux

        variables:
        - _InternalBuildArgs: /p:DotNetSignType=$(_SignType)
            /p:TeamName=$(_TeamName)
            /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

        strategy:
          matrix:
            # No test signing - it's not supported on Linux and macOS
            Real_Signing:
              _BuildConfig: Release
              _SignType: real
        steps:
          - task: CopyFiles@2
            displayName: Copy test packages to artifacts directory
            inputs:
              sourceFolder: $(Build.SourcesDirectory)/src/Validation/Resources
              targetFolder: $(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/NonShipping
          - task: CopyFiles@2
            displayName: Copy .vsix test packages to VS directory
            inputs:
              sourceFolder: $(Build.SourcesDirectory)/src/Validation/Resources/
              targetFolder: $(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)
              contents: '*.vsix'
          - script: eng/common/build.sh
              --configuration $(_BuildConfig)
              --restore
              --prepareMachine
              --sign
              --ci
              $(_InternalBuildArgs)
            displayName: Build
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

      - job: Validate_Signing_MacOS
        pool:
          name: Azure Pipelines
          image: macos-latest
          os: macOS

        variables:
        # 10 minute timeout and diagnostic logging needed to diagnose https://github.com/dotnet/dnceng/issues/4798
        - _InternalBuildArgs: /p:DotNetSignType=$(_SignType)
            /p:TeamName=$(_TeamName)
            /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
            /p:SignToolDotNetTimeout=600000
            /p:SignToolMSBuildVerbosity=diagnostic

        strategy:
          matrix:
            # No test signing - it's not supported on Linux and macOS
            Real_Signing:
              _BuildConfig: Release
              _SignType: real
        steps:
          - task: CopyFiles@2
            displayName: Copy test packages to artifacts directory
            inputs:
              sourceFolder: $(Build.SourcesDirectory)/src/Validation/Resources
              targetFolder: $(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/NonShipping
          - task: CopyFiles@2
            displayName: Copy .vsix test packages to VS directory
            inputs:
              sourceFolder: $(Build.SourcesDirectory)/src/Validation/Resources/
              targetFolder: $(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)
              contents: '*.vsix'
          - script: |
              export MSBUILDTARGETOUTPUTLOGGING=1
              eng/common/build.sh \
                --configuration $(_BuildConfig) \
                --restore \
                --prepareMachine \
                --sign \
                --ci \
                $(_InternalBuildArgs)
            displayName: Build
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)